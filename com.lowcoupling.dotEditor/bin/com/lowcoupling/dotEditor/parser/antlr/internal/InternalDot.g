/*
* generated by Xtext
*/
grammar InternalDot;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.lowcoupling.dotEditor.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.lowcoupling.dotEditor.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.lowcoupling.dotEditor.services.DotGrammarAccess;

}

@parser::members {

 	private DotGrammarAccess grammarAccess;
 	
    public InternalDotParser(TokenStream input, DotGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "GraphModel";	
   	}
   	
   	@Override
   	protected DotGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleGraphModel
entryRuleGraphModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGraphModelRule()); }
	 iv_ruleGraphModel=ruleGraphModel 
	 { $current=$iv_ruleGraphModel.current; } 
	 EOF 
;

// Rule GraphModel
ruleGraphModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getGraphModelAccess().getGraphGraphParserRuleCall_0()); 
	    }
		lv_graph_0_0=ruleGraph		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGraphModelRule());
	        }
       		add(
       			$current, 
       			"graph",
        		lv_graph_0_0, 
        		"Graph");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleGraph
entryRuleGraph returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGraphRule()); }
	 iv_ruleGraph=ruleGraph 
	 { $current=$iv_ruleGraph.current; } 
	 EOF 
;

// Rule Graph
ruleGraph returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGraphAccess().getUndirectedGraphParserRuleCall_0()); 
    }
    this_UndirectedGraph_0=ruleUndirectedGraph
    { 
        $current = $this_UndirectedGraph_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getGraphAccess().getDirectedGraphParserRuleCall_1()); 
    }
    this_DirectedGraph_1=ruleDirectedGraph
    { 
        $current = $this_DirectedGraph_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleUndirectedGraph
entryRuleUndirectedGraph returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUndirectedGraphRule()); }
	 iv_ruleUndirectedGraph=ruleUndirectedGraph 
	 { $current=$iv_ruleUndirectedGraph.current; } 
	 EOF 
;

// Rule UndirectedGraph
ruleUndirectedGraph returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='graph' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUndirectedGraphAccess().getGraphKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getUndirectedGraphAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUndirectedGraphRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUndirectedGraphAccess().getLeftCurlyBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getUndirectedGraphAccess().getEdgeUnDirectedEdgeParserRuleCall_3_0_0()); 
	    }
		lv_edge_3_0=ruleUnDirectedEdge		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUndirectedGraphRule());
	        }
       		add(
       			$current, 
       			"edge",
        		lv_edge_3_0, 
        		"UnDirectedEdge");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getUndirectedGraphAccess().getSemicolonKeyword_3_1());
    }
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getUndirectedGraphAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleDirectedGraph
entryRuleDirectedGraph returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDirectedGraphRule()); }
	 iv_ruleDirectedGraph=ruleDirectedGraph 
	 { $current=$iv_ruleDirectedGraph.current; } 
	 EOF 
;

// Rule DirectedGraph
ruleDirectedGraph returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='digraph' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDirectedGraphAccess().getDigraphKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDirectedGraphAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDirectedGraphRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDirectedGraphAccess().getLeftCurlyBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getDirectedGraphAccess().getEdgeDirectedEdgeParserRuleCall_3_0_0()); 
	    }
		lv_edge_3_0=ruleDirectedEdge		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDirectedGraphRule());
	        }
       		add(
       			$current, 
       			"edge",
        		lv_edge_3_0, 
        		"DirectedEdge");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDirectedGraphAccess().getSemicolonKeyword_3_1());
    }
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDirectedGraphAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleUnDirectedEdge
entryRuleUnDirectedEdge returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnDirectedEdgeRule()); }
	 iv_ruleUnDirectedEdge=ruleUnDirectedEdge 
	 { $current=$iv_ruleUnDirectedEdge.current; } 
	 EOF 
;

// Rule UnDirectedEdge
ruleUnDirectedEdge returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getUnDirectedEdgeAccess().getSrcNodeParserRuleCall_0_0()); 
	    }
		lv_src_0_0=ruleNode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnDirectedEdgeRule());
	        }
       		set(
       			$current, 
       			"src",
        		lv_src_0_0, 
        		"Node");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='--' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnDirectedEdgeAccess().getHyphenMinusHyphenMinusKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnDirectedEdgeAccess().getTgtNodeParserRuleCall_2_0()); 
	    }
		lv_tgt_2_0=ruleNode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnDirectedEdgeRule());
	        }
       		set(
       			$current, 
       			"tgt",
        		lv_tgt_2_0, 
        		"Node");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='[' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUnDirectedEdgeAccess().getLeftSquareBracketKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnDirectedEdgeAccess().getAttributesAttributeParserRuleCall_3_1_0()); 
	    }
		lv_attributes_4_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnDirectedEdgeRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_4_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getUnDirectedEdgeAccess().getRightSquareBracketKeyword_3_2());
    }
)?)
;





// Entry rule entryRuleDirectedEdge
entryRuleDirectedEdge returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDirectedEdgeRule()); }
	 iv_ruleDirectedEdge=ruleDirectedEdge 
	 { $current=$iv_ruleDirectedEdge.current; } 
	 EOF 
;

// Rule DirectedEdge
ruleDirectedEdge returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDirectedEdgeAccess().getSrcNodeParserRuleCall_0_0()); 
	    }
		lv_src_0_0=ruleNode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDirectedEdgeRule());
	        }
       		set(
       			$current, 
       			"src",
        		lv_src_0_0, 
        		"Node");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDirectedEdgeAccess().getHyphenMinusGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDirectedEdgeAccess().getTgtNodeParserRuleCall_2_0()); 
	    }
		lv_tgt_2_0=ruleNode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDirectedEdgeRule());
	        }
       		set(
       			$current, 
       			"tgt",
        		lv_tgt_2_0, 
        		"Node");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='[' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDirectedEdgeAccess().getLeftSquareBracketKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDirectedEdgeAccess().getAttributesAttributeParserRuleCall_3_1_0()); 
	    }
		lv_attributes_4_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDirectedEdgeRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_4_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDirectedEdgeAccess().getRightSquareBracketKeyword_3_2());
    }
)?)
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='weight' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAttributeAccess().getWeightKeyword_0());
    }
	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttributeAccess().getEqualsSignKeyword_1());
    }
(
(
		lv_weight_2_0=RULE_INT
		{
			newLeafNode(lv_weight_2_0, grammarAccess.getAttributeAccess().getWeightINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"weight",
        		lv_weight_2_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleNode
entryRuleNode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeRule()); }
	 iv_ruleNode=ruleNode 
	 { $current=$iv_ruleNode.current; } 
	 EOF 
;

// Rule Node
ruleNode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;









RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


