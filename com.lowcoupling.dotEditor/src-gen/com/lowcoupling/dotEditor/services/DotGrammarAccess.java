/*
* generated by Xtext
*/
package com.lowcoupling.dotEditor.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DotGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class GraphModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GraphModel");
		private final Assignment cGraphAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGraphGraphParserRuleCall_0 = (RuleCall)cGraphAssignment.eContents().get(0);
		
		//GraphModel:
		//	graph+=Graph*;
		public ParserRule getRule() { return rule; }

		//graph+=Graph*
		public Assignment getGraphAssignment() { return cGraphAssignment; }

		//Graph
		public RuleCall getGraphGraphParserRuleCall_0() { return cGraphGraphParserRuleCall_0; }
	}

	public class GraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Graph");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUndirectedGraphParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDirectedGraphParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Graph:
		//	UndirectedGraph | DirectedGraph;
		public ParserRule getRule() { return rule; }

		//UndirectedGraph | DirectedGraph
		public Alternatives getAlternatives() { return cAlternatives; }

		//UndirectedGraph
		public RuleCall getUndirectedGraphParserRuleCall_0() { return cUndirectedGraphParserRuleCall_0; }

		//DirectedGraph
		public RuleCall getDirectedGraphParserRuleCall_1() { return cDirectedGraphParserRuleCall_1; }
	}

	public class UndirectedGraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UndirectedGraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGraphKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cEdgeAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cEdgeUnDirectedEdgeParserRuleCall_3_0_0 = (RuleCall)cEdgeAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//UndirectedGraph:
		//	"graph" name=ID "{" (edge+=UnDirectedEdge ";")* "}";
		public ParserRule getRule() { return rule; }

		//"graph" name=ID "{" (edge+=UnDirectedEdge ";")* "}"
		public Group getGroup() { return cGroup; }

		//"graph"
		public Keyword getGraphKeyword_0() { return cGraphKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(edge+=UnDirectedEdge ";")*
		public Group getGroup_3() { return cGroup_3; }

		//edge+=UnDirectedEdge
		public Assignment getEdgeAssignment_3_0() { return cEdgeAssignment_3_0; }

		//UnDirectedEdge
		public RuleCall getEdgeUnDirectedEdgeParserRuleCall_3_0_0() { return cEdgeUnDirectedEdgeParserRuleCall_3_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class DirectedGraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DirectedGraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDigraphKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cEdgeAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cEdgeDirectedEdgeParserRuleCall_3_0_0 = (RuleCall)cEdgeAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DirectedGraph:
		//	"digraph" name=ID "{" (edge+=DirectedEdge ";")* "}";
		public ParserRule getRule() { return rule; }

		//"digraph" name=ID "{" (edge+=DirectedEdge ";")* "}"
		public Group getGroup() { return cGroup; }

		//"digraph"
		public Keyword getDigraphKeyword_0() { return cDigraphKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(edge+=DirectedEdge ";")*
		public Group getGroup_3() { return cGroup_3; }

		//edge+=DirectedEdge
		public Assignment getEdgeAssignment_3_0() { return cEdgeAssignment_3_0; }

		//DirectedEdge
		public RuleCall getEdgeDirectedEdgeParserRuleCall_3_0_0() { return cEdgeDirectedEdgeParserRuleCall_3_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class UnDirectedEdgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnDirectedEdge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSrcAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSrcNodeParserRuleCall_0_0 = (RuleCall)cSrcAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTgtAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTgtNodeParserRuleCall_2_0 = (RuleCall)cTgtAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_3_1_0 = (RuleCall)cAttributesAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//UnDirectedEdge:
		//	src=Node "--" tgt=Node ("[" attributes+=Attribute* "]")?;
		public ParserRule getRule() { return rule; }

		//src=Node "--" tgt=Node ("[" attributes+=Attribute* "]")?
		public Group getGroup() { return cGroup; }

		//src=Node
		public Assignment getSrcAssignment_0() { return cSrcAssignment_0; }

		//Node
		public RuleCall getSrcNodeParserRuleCall_0_0() { return cSrcNodeParserRuleCall_0_0; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1() { return cHyphenMinusHyphenMinusKeyword_1; }

		//tgt=Node
		public Assignment getTgtAssignment_2() { return cTgtAssignment_2; }

		//Node
		public RuleCall getTgtNodeParserRuleCall_2_0() { return cTgtNodeParserRuleCall_2_0; }

		//("[" attributes+=Attribute* "]")?
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3_1() { return cAttributesAssignment_3_1; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_1_0() { return cAttributesAttributeParserRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
	}

	public class DirectedEdgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DirectedEdge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSrcAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSrcNodeParserRuleCall_0_0 = (RuleCall)cSrcAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTgtAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTgtNodeParserRuleCall_2_0 = (RuleCall)cTgtAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_3_1_0 = (RuleCall)cAttributesAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//DirectedEdge:
		//	src=Node "->" tgt=Node ("[" attributes+=Attribute+ "]")?;
		public ParserRule getRule() { return rule; }

		//src=Node "->" tgt=Node ("[" attributes+=Attribute+ "]")?
		public Group getGroup() { return cGroup; }

		//src=Node
		public Assignment getSrcAssignment_0() { return cSrcAssignment_0; }

		//Node
		public RuleCall getSrcNodeParserRuleCall_0_0() { return cSrcNodeParserRuleCall_0_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//tgt=Node
		public Assignment getTgtAssignment_2() { return cTgtAssignment_2; }

		//Node
		public RuleCall getTgtNodeParserRuleCall_2_0() { return cTgtNodeParserRuleCall_2_0; }

		//("[" attributes+=Attribute+ "]")?
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//attributes+=Attribute+
		public Assignment getAttributesAssignment_3_1() { return cAttributesAssignment_3_1; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_1_0() { return cAttributesAttributeParserRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWeightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWeightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWeightINTTerminalRuleCall_2_0 = (RuleCall)cWeightAssignment_2.eContents().get(0);
		
		//Attribute:
		//	"weight" "=" weight=INT;
		public ParserRule getRule() { return rule; }

		//"weight" "=" weight=INT
		public Group getGroup() { return cGroup; }

		//"weight"
		public Keyword getWeightKeyword_0() { return cWeightKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//weight=INT
		public Assignment getWeightAssignment_2() { return cWeightAssignment_2; }

		//INT
		public RuleCall getWeightINTTerminalRuleCall_2_0() { return cWeightINTTerminalRuleCall_2_0; }
	}

	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Node");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Node:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class GRAPH_LITERALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GRAPH_LITERAL");
		private final Keyword cGraphKeyword = (Keyword)rule.eContents().get(1);
		
		//GRAPH_LITERAL:
		//	"graph";
		public ParserRule getRule() { return rule; }

		//"graph"
		public Keyword getGraphKeyword() { return cGraphKeyword; }
	}

	public class EDGEOP_LITERALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EDGEOP_LITERAL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//EDGEOP_LITERAL:
		//	"->" => "->" | "--" => "--";
		public ParserRule getRule() { return rule; }

		//"->" => "->" | "--" => "--"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"->" => "->"
		public Group getGroup_0() { return cGroup_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_0() { return cHyphenMinusGreaterThanSignKeyword_0_0; }

		//=> "->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_1() { return cHyphenMinusGreaterThanSignKeyword_0_1; }

		//"--" => "--"
		public Group getGroup_1() { return cGroup_1; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1_0() { return cHyphenMinusHyphenMinusKeyword_1_0; }

		//=> "--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1_1() { return cHyphenMinusHyphenMinusKeyword_1_1; }
	}
	
	
	private GraphModelElements pGraphModel;
	private GraphElements pGraph;
	private UndirectedGraphElements pUndirectedGraph;
	private DirectedGraphElements pDirectedGraph;
	private UnDirectedEdgeElements pUnDirectedEdge;
	private DirectedEdgeElements pDirectedEdge;
	private AttributeElements pAttribute;
	private NodeElements pNode;
	private GRAPH_LITERALElements pGRAPH_LITERAL;
	private EDGEOP_LITERALElements pEDGEOP_LITERAL;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public DotGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.lowcoupling.dotEditor.Dot".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//GraphModel:
	//	graph+=Graph*;
	public GraphModelElements getGraphModelAccess() {
		return (pGraphModel != null) ? pGraphModel : (pGraphModel = new GraphModelElements());
	}
	
	public ParserRule getGraphModelRule() {
		return getGraphModelAccess().getRule();
	}

	//Graph:
	//	UndirectedGraph | DirectedGraph;
	public GraphElements getGraphAccess() {
		return (pGraph != null) ? pGraph : (pGraph = new GraphElements());
	}
	
	public ParserRule getGraphRule() {
		return getGraphAccess().getRule();
	}

	//UndirectedGraph:
	//	"graph" name=ID "{" (edge+=UnDirectedEdge ";")* "}";
	public UndirectedGraphElements getUndirectedGraphAccess() {
		return (pUndirectedGraph != null) ? pUndirectedGraph : (pUndirectedGraph = new UndirectedGraphElements());
	}
	
	public ParserRule getUndirectedGraphRule() {
		return getUndirectedGraphAccess().getRule();
	}

	//DirectedGraph:
	//	"digraph" name=ID "{" (edge+=DirectedEdge ";")* "}";
	public DirectedGraphElements getDirectedGraphAccess() {
		return (pDirectedGraph != null) ? pDirectedGraph : (pDirectedGraph = new DirectedGraphElements());
	}
	
	public ParserRule getDirectedGraphRule() {
		return getDirectedGraphAccess().getRule();
	}

	//UnDirectedEdge:
	//	src=Node "--" tgt=Node ("[" attributes+=Attribute* "]")?;
	public UnDirectedEdgeElements getUnDirectedEdgeAccess() {
		return (pUnDirectedEdge != null) ? pUnDirectedEdge : (pUnDirectedEdge = new UnDirectedEdgeElements());
	}
	
	public ParserRule getUnDirectedEdgeRule() {
		return getUnDirectedEdgeAccess().getRule();
	}

	//DirectedEdge:
	//	src=Node "->" tgt=Node ("[" attributes+=Attribute+ "]")?;
	public DirectedEdgeElements getDirectedEdgeAccess() {
		return (pDirectedEdge != null) ? pDirectedEdge : (pDirectedEdge = new DirectedEdgeElements());
	}
	
	public ParserRule getDirectedEdgeRule() {
		return getDirectedEdgeAccess().getRule();
	}

	//Attribute:
	//	"weight" "=" weight=INT;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//Node:
	//	name=ID;
	public NodeElements getNodeAccess() {
		return (pNode != null) ? pNode : (pNode = new NodeElements());
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}

	//GRAPH_LITERAL:
	//	"graph";
	public GRAPH_LITERALElements getGRAPH_LITERALAccess() {
		return (pGRAPH_LITERAL != null) ? pGRAPH_LITERAL : (pGRAPH_LITERAL = new GRAPH_LITERALElements());
	}
	
	public ParserRule getGRAPH_LITERALRule() {
		return getGRAPH_LITERALAccess().getRule();
	}

	//EDGEOP_LITERAL:
	//	"->" => "->" | "--" => "--";
	public EDGEOP_LITERALElements getEDGEOP_LITERALAccess() {
		return (pEDGEOP_LITERAL != null) ? pEDGEOP_LITERAL : (pEDGEOP_LITERAL = new EDGEOP_LITERALElements());
	}
	
	public ParserRule getEDGEOP_LITERALRule() {
		return getEDGEOP_LITERALAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
